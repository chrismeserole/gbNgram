{
    "contents" : "#' Get Google Books Ngram Data By Group\n#'\n#' This function fetches the underlying plot data for Google Books Ngrams for a sequence of related terms.\n#'\n#' @param terms Terms to query against the Google Books corpus. Typically a vector.\n#' @param qualifiers A set of terms, typically qualifiersectives, that will precede each element in `terms`.\n#' @param yr.start The first year to query. Defaults to 1800.\n#' @param yr.end The last year to query. Defaults to 2008.\n#' @param group.by Whether to group results by `terms` (1) or `qualifiers` (2). Defaults to 1.\n#' @param include.plurals Boolean that indicates whether to also include naive plurals in the query terms. Defaults to FALSE. If TRUE, expands `terms` to also include a duplicate of each element, but with an `s` added.\n#' @param smoothing The number of years to smooth over. Defaults to 0.\n#' @param data.path The path to save data to. Defaults to current working directory.\n#' @param f.overwrite Boolean that captures whether to overwrite save files. Useful if you use the same terms, but change the year range. Defaults to FALSE.\n#' @param save.data Boolean that captures whether to save data to disk. Defaults to FALSE If searching/analysing a large number of terms, this will save a lot of time.\n#' @param corpus The corpus to query. Defaults to 15, which corresponds to the English language corpus.\n#' @keywords ngrams\n#' @export ngram_group\n#' @examples\n#' library(ggplot2)\n#' library(tidyr)\n#' library(dplyr)\n#'\n#' # set query terms\n#' main.terms <- c(\"soldier\", \"politician\", \"writer\")\n#' adjs <- c(\"British\", \"English\")\n#'\n#' # plot by term\n#' df <- ngram_group(main.terms, adjs, include.plurals = TRUE)\n#'\n#' df.plot <- df %>%\n#'   gather(term, frequency, -year)\n#'\n#' p <- ggplot(df.plot, aes(year, frequency, colour=term)) + geom_line() +\n#'   ylab(\"Frequency\") +\n#'   xlab(\"Year\") +\n#'   ggtitle(\"Terms in Google Books, 1800-2000\") +\n#'   theme_bw()\n#' p\n#'\n#'\n#' # group by qualifier\n#' df <- ngram_group(main.terms, adjs, group.by = 2,\n#'                            include.plurals = TRUE)\n#'\n#' df.plot <- df %>%\n#'  gather(term, frequency, -year)\n#'\n#' p <- ggplot(df.plot, aes(year, frequency, colour=term)) + geom_line() +\n#'  ylab(\"Frequency\") +\n#'   xlab(\"Year\") +\n#'   ggtitle(\"Terms in Google Books, 1800-2000\") +\n#'   theme_bw()\n#' p\n\nngram_group <- function(terms,\n                                 qualifiers,\n                                 yr.start = 1800,\n                                 yr.end = 2000,\n                                 group.by = 1,\n                                 smoothing = 0,\n                                 save.data = F,\n                                 include.plurals = F,\n                                 data.path = NULL,\n                                 f.overwrite = F,\n                                 corpus = 15) {\n\n  prefix <- function(str, terms){\n    return(sapply(terms, function(x) {paste(str, x)}))\n  }\n\n  plural <- function(terms){\n    return(sapply(terms, function(x) {paste0(x, \"s\")}))\n  }\n\n  if(is.null( data.path )){\n    data.path <- paste0( getwd(), \"/\" )\n  }\n\n  if(group.by == 1){\n    for(i in 1:length( terms )){\n\n      f.path <- paste0( data.path, \"gb-ngram-\", terms[i], \".RData\" )\n\n      if(!(file.exists( f.path )) || f.overwrite == T){\n        q <- prefix( qualifiers, terms[i] )\n        if(include.plurals == T){\n          query.terms <- c( q, plural( q ) )\n        } else {\n          query.terms <- q\n        }\n        df.query <- ngram( query.terms, yr.start, yr.end, smoothing, corpus )\n        if(save.data == T){\n          saveRDS( df.query, file = f.path )\n        }\n      } else {\n        df.query <- readRDS( f.path )\n      }\n\n      q.vec <- apply(dplyr::select( df.query, -year ), 1, function(x) { sum( x ) } )\n      df <- data.frame( q.vec, df.query$year )\n\n      if(!(is.null( qualifiers ))){\n        names( df ) <- c( paste( qualifiers[1], terms[i]), \"year\" )\n      } else {\n        names( df ) <- c( terms[i], \"year\" )\n      }\n\n      if(i == 1){  df.master <- df } else {\n        df.master <- merge( df.master, df, by = \"year\" )\n      }\n    }\n  }\n\n  if(group.by == 2){\n    for(i in 1:length( qualifiers )){\n\n      f.path <- paste0( data.path, \"gb-ngram-\", qualifiers[i], \".RData\" )\n\n      if(!(file.exists( f.path )) || f.overwrite == T){\n        q <- prefix( qualifiers[i], terms)\n        if(include.plurals == T){\n          query.terms <- c( q, plural( q ) )\n        } else {\n          query.terms <- q\n        }\n        df.query <- ngram( query.terms, yr.start, yr.end, smoothing, corpus )\n        if(save.data == T){\n          saveRDS( df.query, file = f.path )\n        }\n      } else {\n        df.query <- readRDS( f.path )\n      }\n\n      q.vec <- apply(dplyr::select( df.query, -year ), 1, function(x) { sum( x ) } )\n      df <- data.frame( q.vec, df.query$year )\n\n      names( df ) <- c( qualifiers[i], \"year\" )\n\n      if(i == 1){  df.master <- df } else {\n        df.master <- merge( df.master, df, by = \"year\" )\n      }\n    }\n  }\n\n  return( df.master )\n}\n",
    "created" : 1480959639425.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "852604011",
    "id" : "5A73087C",
    "lastKnownWriteTime" : 1480962046,
    "path" : "~/Desktop/workspace/gbNgram/R/ngram_group.R",
    "project_path" : "R/ngram_group.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}